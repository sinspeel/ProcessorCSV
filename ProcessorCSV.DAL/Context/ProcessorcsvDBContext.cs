// <auto-generated> This file has been auto generated by EF Core Power Tools. </auto-generated>
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Metadata;
using ProcessorCSV.DAL.Entities;

#nullable disable

namespace ProcessorCSV.DAL.Context
{
    public partial class ProcessorcsvDBContext : DbContext
    {
        public ProcessorcsvDBContext()
        {
        }

        public ProcessorcsvDBContext(DbContextOptions<ProcessorcsvDBContext> options)
            : base(options)
        {
        }

        public virtual DbSet<Document> Documents { get; set; }
        public virtual DbSet<DocumentItem> DocumentItems { get; set; }

        protected override void OnModelCreating(ModelBuilder modelBuilder)
        {

            modelBuilder.Entity<Document>(entity =>
            {
                entity.ToTable("Document");

                entity.Property(e => e.Id).ValueGeneratedNever();

                entity.Property(e => e.CreateDate)
                    .HasColumnType("datetime")
                    .HasDefaultValueSql("getdate()");

                entity.Property(e => e.DocumentName)
                    .IsRequired()
                    .HasMaxLength(250);

                entity.Property(e => e.LastModified).HasColumnType("datetime");
            });

            modelBuilder.Entity<DocumentItem>(entity =>
            {
                entity.Property(e => e.Id).HasDefaultValueSql("newid()");

                entity.Property(e => e.CourseCode)
                    .IsRequired()
                    .HasMaxLength(250);

                entity.Property(e => e.CourseDescription)
                    .IsRequired()
                    .HasMaxLength(250);

                entity.Property(e => e.FirstName)
                    .IsRequired()
                    .HasMaxLength(250);

                entity.Property(e => e.Grade)
                    .IsRequired()
                    .HasMaxLength(250);

                entity.Property(e => e.StudentNumber)
                    .IsRequired()
                    .HasMaxLength(250);

                entity.Property(e => e.Surname)
                    .IsRequired()
                    .HasMaxLength(250);

                entity.HasOne(d => d.Document)
                    .WithMany(p => p.DocumentItems)
                    .HasForeignKey(d => d.DocumentID)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_DocumentItems_Document");
            });

            OnModelCreatingPartial(modelBuilder);
        }

        partial void OnModelCreatingPartial(ModelBuilder modelBuilder);
    }
}